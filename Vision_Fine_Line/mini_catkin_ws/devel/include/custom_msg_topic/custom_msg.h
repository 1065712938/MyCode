// Generated by gencpp from file custom_msg_topic/custom_msg.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSG_TOPIC_MESSAGE_CUSTOM_MSG_H
#define CUSTOM_MSG_TOPIC_MESSAGE_CUSTOM_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace custom_msg_topic
{
template <class ContainerAllocator>
struct custom_msg_
{
  typedef custom_msg_<ContainerAllocator> Type;

  custom_msg_()
    : levels_of_anger(0.0)
    , min_lidar_data(0.0)
    , Avoidance_Classification_group()
    , Speed_change_of_obstacle(0.0)  {
    }
  custom_msg_(const ContainerAllocator& _alloc)
    : levels_of_anger(0.0)
    , min_lidar_data(0.0)
    , Avoidance_Classification_group(_alloc)
    , Speed_change_of_obstacle(0.0)  {
  (void)_alloc;
    }



   typedef float _levels_of_anger_type;
  _levels_of_anger_type levels_of_anger;

   typedef float _min_lidar_data_type;
  _min_lidar_data_type min_lidar_data;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _Avoidance_Classification_group_type;
  _Avoidance_Classification_group_type Avoidance_Classification_group;

   typedef float _Speed_change_of_obstacle_type;
  _Speed_change_of_obstacle_type Speed_change_of_obstacle;





  typedef boost::shared_ptr< ::custom_msg_topic::custom_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msg_topic::custom_msg_<ContainerAllocator> const> ConstPtr;

}; // struct custom_msg_

typedef ::custom_msg_topic::custom_msg_<std::allocator<void> > custom_msg;

typedef boost::shared_ptr< ::custom_msg_topic::custom_msg > custom_msgPtr;
typedef boost::shared_ptr< ::custom_msg_topic::custom_msg const> custom_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msg_topic::custom_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msg_topic::custom_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace custom_msg_topic

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'custom_msg_topic': ['/home/crazy/mini_catkin_ws/src/custom_msg_topic/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg_topic::custom_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg_topic::custom_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msg_topic::custom_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msg_topic::custom_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg_topic::custom_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg_topic::custom_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msg_topic::custom_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "56c5740684da4cec8bf62501dd7b9504";
  }

  static const char* value(const ::custom_msg_topic::custom_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x56c5740684da4cecULL;
  static const uint64_t static_value2 = 0x8bf62501dd7b9504ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msg_topic::custom_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msg_topic/custom_msg";
  }

  static const char* value(const ::custom_msg_topic::custom_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msg_topic::custom_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 levels_of_anger\n\
float32 min_lidar_data\n\
float32[] Avoidance_Classification_group\n\
float32 Speed_change_of_obstacle \n\
";
  }

  static const char* value(const ::custom_msg_topic::custom_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msg_topic::custom_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.levels_of_anger);
      stream.next(m.min_lidar_data);
      stream.next(m.Avoidance_Classification_group);
      stream.next(m.Speed_change_of_obstacle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct custom_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msg_topic::custom_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msg_topic::custom_msg_<ContainerAllocator>& v)
  {
    s << indent << "levels_of_anger: ";
    Printer<float>::stream(s, indent + "  ", v.levels_of_anger);
    s << indent << "min_lidar_data: ";
    Printer<float>::stream(s, indent + "  ", v.min_lidar_data);
    s << indent << "Avoidance_Classification_group[]" << std::endl;
    for (size_t i = 0; i < v.Avoidance_Classification_group.size(); ++i)
    {
      s << indent << "  Avoidance_Classification_group[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.Avoidance_Classification_group[i]);
    }
    s << indent << "Speed_change_of_obstacle: ";
    Printer<float>::stream(s, indent + "  ", v.Speed_change_of_obstacle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSG_TOPIC_MESSAGE_CUSTOM_MSG_H
